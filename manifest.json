{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls /junit/*.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  # run test classes even if they are inner classes\n  # remove voluminous stack trace from output\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'` | grep -Ev 'org.junit.runner|org.junit.internal|sun.reflect|org.junit.Assert|java.lang.reflect|org.hamcrest'\nfi\n","output":"Patient.java:22: error: cannot find symbol\n            clashingMedicines.get(0).getPrescriptions.get(0);\n                                    ^\n  symbol:   variable getPrescriptions\n  location: class Medicine\nPatient.java:23: error: cannot find symbol\n        LocalDate startA = \n        ^\n  symbol:   class LocalDate\n  location: class Patient\nPatient.java:24: error: cannot find symbol\n            prescriptionA.getDispenseDate();\n                         ^\n  symbol:   method getDispenseDate()\n  location: variable prescriptionA of type Prescription\nPatient.java:25: error: cannot find symbol\n        LocalDate endA = \n        ^\n  symbol:   class LocalDate\n  location: class Patient\nPatient.java:26: error: cannot find symbol\n            prescriptionA.getDispenseDate().plusDays(prescriptionA.getDaysSupply());\n                                                                  ^\n  symbol:   method getDaysSupply()\n  location: variable prescriptionA of type Prescription\nPatient.java:26: error: cannot find symbol\n            prescriptionA.getDispenseDate().plusDays(prescriptionA.getDaysSupply());\n                         ^\n  symbol:   method getDispenseDate()\n  location: variable prescriptionA of type Prescription\nPatient.java:28: error: cannot find symbol\n            clashingMedicines.get(1).getPrescriptions.get(0);\n                                    ^\n  symbol:   variable getPrescriptions\n  location: class Medicine\nPatient.java:29: error: cannot find symbol\n        LocalDate startB = \n        ^\n  symbol:   class LocalDate\n  location: class Patient\nPatient.java:30: error: cannot find symbol\n            prescriptionB.getDispenseDate();\n                         ^\n  symbol:   method getDispenseDate()\n  location: variable prescriptionB of type Prescription\nPatient.java:31: error: cannot find symbol\n        LocalDate endB = \n        ^\n  symbol:   class LocalDate\n  location: class Patient\nPatient.java:32: error: cannot find symbol\n            prescriptionB.getDispenseDate().plusDays(prescriptionB.getDaysSupply());\n                                                                  ^\n  symbol:   method getDaysSupply()\n  location: variable prescriptionB of type Prescription\nPatient.java:32: error: cannot find symbol\n            prescriptionB.getDispenseDate().plusDays(prescriptionB.getDaysSupply());\n                         ^\n  symbol:   method getDispenseDate()\n  location: variable prescriptionB of type Prescription\n12 errors\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","PatientTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport java.time.LocalDate;\nimport java.util.Arrays;\n\npublic class PatientTest {\n\n    @Test\n    public void no_clash_when_not_taking_both_medicines() {\n        Prescription prescription = \n            new Prescription(LocalDate.now().minusDays(30), 30);\n        Medicine codeine = new Medicine(\"Codeine\", \n            Arrays.asList(prescription));\n        Patient patient = new Patient(Arrays.asList(codeine));\n\n        assertEquals(0, \n            patient.clash(Arrays.asList(\"Codeine\", \"Prozac\"), 90));\n    }\n\n    @Test\n    public void no_clash_when_no_overlap() {\n        Prescription prescriptionCodeine = \n            new Prescription(LocalDate.now().minusDays(90), 30);\n        Medicine codeine = new Medicine(\"Codeine\", \n            Arrays.asList(prescriptionCodeine));\n        Prescription prescriptionProzac = \n            new Prescription(LocalDate.now().minusDays(30), 30);\n        Medicine prozac = new Medicine(\"Prozac\", \n            Arrays.asList(prescriptionProzac));\n        Patient patient = new Patient(Arrays.asList(codeine, prozac));\n\n        assertEquals(0, \n            patient.clash(Arrays.asList(\"Codeine\", \"Prozac\"), 90));\n    }\n\n    // TODO: clash_when_medicines_taken_overlapping\n    // TODO: clash_when_medicines_taken_overlapping_start_of_period\n    // TODO: clash_when_medicines_taken_overlapping_current_date\n    // TODO: clash_when_medicines_taken_continuously_with_the_same_period\n    // TODO: clash_when_medicines_taken_continuously_with_partial_overlap\n}\n","Patient.java":"import java.util.List;\n\npublic class Patient {\n    private List<Medicine> clashingMedicines;\n\n    public Patient(List<Medicine> clashingMedicines) {\n        this.clashingMedicines = clashingMedicines;\n    }\n\n    public int clash(List<String> medicineNames, int daysBeforeToday) {\n        if (this.clashingMedicines.size() <= 1) {\n            return 0;\n        }\n        if (!isOverlapped(clashingMedicines)) {\n            return 0;\n        }\n        return -1;\n    }\n\n    private boolean isOverlapped(List<Medicine> clashingMedicines) {\n        Prescription prescriptionA = \n            clashingMedicines.get(0).getPrescriptions.get(0);\n        LocalDate startA = \n            prescriptionA.getDispenseDate();\n        LocalDate endA = \n            prescriptionA.getDispenseDate().plusDays(prescriptionA.getDaysSupply());\n        Prescription prescriptionB = \n            clashingMedicines.get(1).getPrescriptions.get(0);\n        LocalDate startB = \n            prescriptionB.getDispenseDate();\n        LocalDate endB = \n            prescriptionB.getDispenseDate().plusDays(prescriptionB.getDaysSupply());\n        \n        return !(startA.isAfter(endB) || endA.isBefore(startB)) ? \n            true : false;\n    }\n}\n","Medicine.java":"import java.util.List;\n\npublic class Medicine {\n    public Medicine(String name, List<Prescription> prescriptions) {\n    }\n}","Prescription.java":"import java.time.LocalDate;\n\npublic class Prescription {\n    public Prescription(LocalDate dispenseDate, int daysSupply) {\n    }\n}"}